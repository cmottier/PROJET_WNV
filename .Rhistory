else {
X[i+1] <- sample(x = c(0,M), 1, prob = c(p,1-p))
}
}
#print(c1*sum(X == rep(M,N+1))) # Affiche le gain c1*nb_M
return (X)}
simul1()
plot.new()
plot(x = 0:N, y = simul1(), type='l', col='blue', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = simul1(), type='l', col='red', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = simul1(), type='l', col='green', ylim=c(0,M))
MC <- function(n) {
G <- NULL
for (i in 1:n) {
S <- simul1()
G[i] <- c1*sum(S == rep(M,N+1))
}
print(mean(G))
print(mean(G)-1.96*sqrt(var(G)/n))
print(mean(G)+1.96*sqrt(var(G)/n))
}
MC(10000)
# Politique : Couper à maturité
simul2 <- function() {
X <- rep(0,N+1)
X[1] <- X0
for (i in 1:N) {
if (X[i]<M) {
X[i+1] <- sample(x = c(0,X[i]+1), 1, prob = c(p,1-p))
}
else {
X[i+1] <- 0
}
}
# print(c2*sum(X[1:N] == rep(M,N))+c1*(X[N+1]==M)) # Affiche le gain c1*nb_M
return (X)}
simul2()
plot.new()
plot(x = 0:N, y = simul2(), type='l', col='blue', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = simul2(), type='l', col='red', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = simul2(), type='l', col='green', ylim=c(0,M))
MC2 <- function(n) {
G <- NULL
for (i in 1:n) {
S <- simul2()
G[i] <- c2*sum(S[1:N] == rep(M,N))+c1*(S[N+1]==M)
}
print(mean(G))
print(mean(G)-1.96*sqrt(var(G)/n))
print(mean(G)+1.96*sqrt(var(G)/n))
}
MC2(10000)
# Performance optimale
# matrices de transition
Q <- array(0, dim=c(M+1, M+1, 2))
# ne rien faire : action 0
Q[,1,1] <- rep(p,M+1)
for (i in 1:M) {
Q[i,i+1,1] <- 1-p
}
Q[M+1,M+1,1] <- 1-p
# couper : action 1
Q[2:(M+1),1,2] <- 1
# Récompense instantanée
recomp <- array(0, dim=c(M+1,2))
recomp[M+1,1] <- c1
recomp[2:M,2] <- rep(1,M-1)
recomp[1,2] <- -Inf
recomp[M+1,2] <- c2
# Initialisation de V0
V <- matrix(0,M+1,N+1)
V[M+1,1] <- c1
maxim <- matrix(0,M+1,N)
for (n in 1:N) {
for (x in 0:M) {
tmp <- recomp[x+1,]+V[,n]%*%Q[x+1,,]
maxim[x+1,n] <- which.max(tmp)
V[x+1,n+1] <- max(tmp)
}
}
pi <- maxim[,N:1]
pi
traj_opt <- function(x,N,pi) {
X <- NULL
X[1] <- x
for (i in 1:N) {
X[i+1] <- sample(0:M, size=1, prob=Q[X[i]+1,,pi[X[i]+1,i]])
}
return(X)
}
plot.new()
plot(x = 0:N, y = traj_opt(x,N,pi), type='l', col='blue', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = traj_opt(x,N,pi), type='l', col='red', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = traj_opt(x,N,pi), type='l', col='green', ylim=c(0,M))
plot.new()
plot(x = 0:N, y = traj_opt(X0,N,pi), type='l', col='blue', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = traj_opt(X0,N,pi), type='l', col='red', ylim=c(0,M))
par(new =T)
plot(x = 0:N,y = traj_opt(X0,N,pi), type='l', col='green', ylim=c(0,M))
split.screen(1:3)
screen(1) ; plot(x = 0:N, y = traj_opt(X0,N,pi), type='l', col='blue', ylim=c(0,M))
screen(2) ; plot(x = 0:N,y = traj_opt(X0,N,pi), type='l', col='red', ylim=c(0,M))
screen(3) ; plot(x = 0:N,y = traj_opt(X0,N,pi), type='l', col='green', ylim=c(0,M))
layout(matrix(1:3,1,3))
plot(x = 0:N, y = traj_opt(X0,N,pi), type='l', col='blue', ylim=c(0,M)) ;
plot(x = 0:N,y = traj_opt(X0,N,pi), type='l', col='red', ylim=c(0,M)) ;
plot(x = 0:N,y = traj_opt(X0,N,pi), type='l', col='green', ylim=c(0,M))
pi
# matrices de transition
Q <- array(0, dim=c(M+1, M+1, 2))
# ne rien faire : action 0
Q[,1,1] <- rep(p,M+1)
for (i in 1:M) {
Q[i,i+1,1] <- 1-p
}
Q[M+1,M+1,1] <- 1-p
# couper : action 1
Q[2:(M+1),1,2] <- 1
# Récompense instantanée
recomp <- array(0, dim=c(M+1,2))
recomp[M+1,1] <- c1
recomp[2:M,2] <- rep(1,M-1)
recomp[1,2] <- -Inf
recomp[M+1,2] <- c2
# Initialisation de V0
V <- matrix(0,M+1,N+1)
V[M+1,1] <- c1
maxim <- matrix(0,M+1,N)
for (n in 1:N) {
for (x in 0:M) {
tmp <- recomp[x+1,]+V[,n]%*%Q[x+1,,]
maxim[x+1,n] <- which.max(tmp)
V[x+1,n+1] <- max(tmp)
}
}
pi <- maxim[,N:1]
pi
View(recomp)
V[X0,N+1]
V
V[X0+1,N+1]
pi
tree <- read.tree(here("data", "WNV_Pybus2012_MCC.newick"))
C <- matrix(nrow=104, ncol=104)
for (i in 1:104) {
C[i,i] <- node.depth.edgelength(tree)[i]
}
## Import the data
dat <- read.table(here("data", "WNV_lat_long.txt"), header = TRUE)
library(here) # To deal with paths : project must be root, and data must be in a folder named "data".
library(ape)  # R package for phylogenetic trees
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("data", "WNV_Pybus2012_MCC.newick"))
library(here) # To deal with paths : project must be root, and data must be in a folder named "data".
library(ape)  # R package for phylogenetic trees
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("data", "WNV_Pybus2012_MCC.newick"))
setwd("~/SSD/Projet/PROJET")
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("data", "WNV_Pybus2012_MCC.newick"))
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("PROJET/data", "WNV_Pybus2012_MCC.newick"))
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("projet/PROJET/data", "WNV_Pybus2012_MCC.newick"))
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("Projet/PROJET/data", "WNV_Pybus2012_MCC.newick"))
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("SSD/Projet/PROJET/data", "WNV_Pybus2012_MCC.newick"))
str(tree)
n_nodes <- tree$Nnode
n_tips <- length(tree$tip.label)
# See help(read.tree) for the structure of the tree in R
## Plot the tree
plot(tree)
axisPhylo()
################################################################################
## Data
################################################################################
## Import the data
dat <- read.table(here("data", "WNV_lat_long.txt"), header = TRUE)
dat <- read.table(here("SSD/Projet/PROJET/data", "WNV_lat_long.txt"), header = TRUE)
head(dat)
## Match
# Match the data with the tips of the tree, so that they are in the same order
match(tree$tip.label, dat$traits)
dat <- dat[match(tree$tip.label, dat$traits), ]
match(tree$tip.label, dat$traits)
## Plot tree and data
plot(tree, show.tip.label = FALSE, x.lim = 25)
phydataplot(dat$lat, tree, offset = 1, scaling = 0.1)
phydataplot(dat$long, tree, offset = 15, scaling = 0.05)
# Same plot, without the warnings : vectors need to be named.
lat <- dat$lat
long <- dat$long
names(lat) <- names(long) <- dat$traits
plot(tree, show.tip.label = FALSE, x.lim = 25)
phydataplot(lat, tree, offset = 1, scaling = 0.1)
phydataplot(long, tree, offset = 15, scaling = 0.05)
onstruction de C, basée sur les feuilles (temps d'évolution commune)
C <- matrix(nrow=104, ncol=104)
for (i in 1:104) {
C[i,i] <- node.depth.edgelength(tree)[i]
}
for (i in 1:103) {
for (j in ((i+1):104)) {
ancetre <- getMRCA(tree,c(i,j))
tij <- node.depth.edgelength(tree)[ancetre]
C[i,j] <- tij
C[j,i] <- tij
}
}
# Matrice T des temps des feuilles
T <- matrix(nrow=104, ncol=1)
for (i in 1:104) {
T[i] <- C[i,i]
}
# Estimateurs de mu et R
invC <- solve(C)
Un <- matrix(rep(1,104),ncol=1)
X <- cbind(Un,T)
Y <- as.matrix(dat[,2:3])
theta <- solve(t(X)%*%invC%*%X)%*%t(X)%*%invC%*%Y
R_d <- 1/102*t(Y)%*%invC%*%(Y-X%*%theta)
# Construction de Cnoeud, basée sur tous les noeuds
f <- function(x) {
if (x<105) return(x)
else return(x+1)
}
Cnoeud <- matrix(nrow=206, ncol=206) # On enlève la racine 105
for (i in 1:206) {
Cnoeud[i,i] <- node.depth.edgelength(tree)[f(i)]
}
for (i in 1:205) {
for (j in ((i+1):206)) {
ancetre <- getMRCA(tree,c(f(i),f(j)))
tij <- node.depth.edgelength(tree)[ancetre]
Cnoeud[i,j] <- tij
Cnoeud[j,i] <- tij
}
}
Tm <- matrix(nrow=102, ncol=1)
for (i in 1:102) {
Tm[i] <- Cnoeud[i+104,i+104]
}
Um <- matrix(rep(1,102),ncol=1)
RC_d <- kronecker(R_d,Cnoeud, FUN = "*")
vecY <- matrix(Y, ncol=1, byrow = F)
mY_d <- matrix(Un%*%theta[1,]+T%*%theta[2,], ncol=1, byrow =F)
mX_d <- matrix(Um%*%theta[1,]+Tm%*%theta[2,], ncol=1, byrow=F)
SigmaXY_d <- rbind(cbind(RC_d[105:206,1:104],RC_d[105:206,207:310]),cbind(RC_d[311:412,1:104],RC_d[311:412,207:310]))
SigmaY_d <- rbind(cbind(RC_d[1:104,1:104],RC_d[1:104,207:310]),cbind(RC_d[207:310,1:104],RC_d[207:310,207:310]))
Estimateur_d <- mX_d + SigmaXY_d%*%solve(SigmaY_d)%*%(vecY-mY_d)
Estimateur_d
theta
library(here) # To deal with paths : project must be root, and data must be in a folder named "data".
library(ape)  # R package for phylogenetic trees
################################################################################
## Tree
################################################################################
## Import the tree
tree <- read.tree(here("data", "WNV_Pybus2012_MCC.newick"))
str(tree)
n_nodes <- tree$Nnode
n_tips <- length(tree$tip.label)
## Plot the tree
plot(tree)
axisPhylo()
################################################################################
## Data
################################################################################
## Import the data
dat <- read.table(here("data", "WNV_lat_long.txt"), header = TRUE)
head(dat)
## Match
# Match the data with the tips of the tree, so that they are in the same order
match(tree$tip.label, dat$traits)
dat <- dat[match(tree$tip.label, dat$traits), ]
match(tree$tip.label, dat$traits)
## Plot tree and data
plot(tree, show.tip.label = FALSE, x.lim = 25)
phydataplot(dat$lat, tree, offset = 1, scaling = 0.1)
phydataplot(dat$long, tree, offset = 15, scaling = 0.05)
# Same plot, without the warnings : vectors need to be named.
lat <- dat$lat
long <- dat$long
names(lat) <- names(long) <- dat$traits
plot(tree, show.tip.label = FALSE, x.lim = 25)
phydataplot(lat, tree, offset = 1, scaling = 0.1)
mtext("Latitude",1,at=12.5,line=3)
args.barplot=list(xlab="latitude")
phydataplot(long, tree, offset = 15, scaling = 0.05)
mtext("Longitude",1,at=21,line=3)
library(mvMORPH)
C <- vcv(tree)
invC<-solve(C)
Un <- matrix(rep(1,104),ncol = 1)
help(mvSIM)
# simulations:
mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = theta, trend = c(1,2)))
# simulations:
mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu, trend = c(1,2)))
# variance
Sigma <- matrix(c(1,-1,-1,2),nrow = 2)
# moyenne (ancetre)
mu = c(1,1)
## paramètres pour l'estimation
C <- vcv(tree)
invC<-solve(C)
Un <- matrix(rep(1,104),ncol = 1)
# simulations:
mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu, trend = c(1,2)))
# simulations:
mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu))
# variance
sigma <- matrix(c(1,-1,-1,2),nrow = 2)
# simulations:
mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu, trend = c(1,2)))
err <- NULL
for(i in 1:10000){
fit <- mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sima, theta = mu))
mu_est <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%fit
err[i]<- sum((mu - mu_est)^2)
}
for(i in 1:10000){
fit <- mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu))
mu_est <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%fit
err[i]<- sum((mu - mu_est)^2)
}
mean(err)
boxplot(err)
# simulations:
sim <- mvSIM(tree = tree, nsim = 10000, model = "BM1", param = list(sigma = sigma, theta = mu))
sim
for(i in 1:10000){
y<-sim[[i]]
mu_est <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%y
err[i]<- sum((mu - mu_est)^2)
err[i] <- (sum((mu-mu_est)^2)) / sum(mu^2)
}
mean(err)
boxplot(err)
boxplot(err_norm)
err <- NULL
err_norm <- NULL
for(i in 1:10000){
#y<-mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu))
y <- sim[[i]]
mu_est <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%y
err[i]<- sum((mu - mu_est)^2)
err_norm[i] <- (sum((mu-mu_est)^2)) / sum(mu^2)
}
mean(err)
boxplot(err)
boxplot(err_norm)
boxplot(err,main = "Boxplot des erreurs d'estimation")
err_moy <- mean(err)
err_min <- err_moy - 1.96*sqrt(var(err)/n)
err_max <- err_moy + 1.96*sqrt(var(err)/n)
err_min <- err_moy - 1.96*sqrt(var(err)/10000)
err_max <- err_moy + 1.96*sqrt(var(err)/10000)
c(err_min,err_moy,err_max)
help("boxplot")
sim <- mvSIM(tree = tree, nsim = 10000, model = "BM1", param = list(sigma = sigma, theta = mu))
err <- NULL
err_mu1 <- NULL
err_mu2 <- NULL
err_norm <- NULL
for(i in 1:10000){
#y<-mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu))
y <- sim[[i]] # simulation n°i
mu_est <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%y #estimateur de mu (ancêtre)
err_mu1[i] <- (mu[1] - mu_est[1])^2 #erreur sur la première composante
err_mu2[i] w- (mu[2] - mu_est[2])^2 #erreur sur la deuxième composante
err <- NULL
err_mu1 <- NULL
err_mu2 <- NULL
err_norm <- NULL
for(i in 1:10000){
#y<-mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = sigma, theta = mu))
y <- sim[[i]] # simulation n°i
mu_est <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%y #estimateur de mu (ancêtre)
err_mu1[i] <- (mu[1] - mu_est[1])^2 #erreur sur la première composante
err_mu2[i] <- (mu[2] - mu_est[2])^2 #erreur sur la deuxième composante
err[i]<- sum((mu - mu_est)^2)
err_norm[i] <- (sum((mu-mu_est)^2)) / sum(mu^2)
}
err_moy <- mean(err)
err_min <- err_moy - 1.96*sqrt(var(err)/10000)
err_max <- err_moy + 1.96*sqrt(var(err)/10000)
c(err_min,err_moy,err_max) # intervalle de confiance ?
# erreur sur la première composante
err_mu1_moy <- mean(err_mu1)
err_mu1_min <- err_mu1_moy - 1.96*sqrt(var(err_mu1)/10000)
err_mu1_max <- err_mu1_moy + 1.96*sqrt(var(err_mu1)/10000)
c(err_mu1_min, err_mu1_moy, err_mu1_moy)
# erreur sur la deuxième composante
err_mu2_moy <- mean(err_mu2)
err_mu2_min <- err_mu2_moy - 1.96*sqrt(var(err_mu2)/10000)
err_mu2_max <- err_mu2_moy + 1.96*sqrt(var(err_mu2)/10000)
c(err_mu2_min,err_mu2_moy,err_mu2_max)
boxplot(c(err_mu1,err_mu2))
boxplot(err_mu1)
boxplot(err_mu2)
max(err)
boxplot(err,main = "Boxplot des erreurs d'estimation",range = 1)
boxplot(err,main = "Boxplot des erreurs d'estimation",range = 100)
boxplot(err,main = "Boxplot des erreurs d'estimation",range = 0)
boxplot(err,main = "Boxplot des erreurs d'estimation",range = 1)
boxplot(err,main = "Boxplot des erreurs d'estimation",range = 1,ylim = c(-1,6))
T <- diag(C)
X <- cbind(Un,T)
X
T <- matrix(diag(C))
X <- cbind(Un,T)
X
T <- matrix(diag(C))
X <- cbind(Un,T)
sim <- mvSIM(tree = tree, nsim = 1000, model = "BM1", param = list(sigma = sigma, theta = mu))
AIC <- NULL
AICd <- NULL
for(i in 1:1000){
Y <- sim[[i]]
L_hat <- -104*log(2*pi)-104/2*log(det(R))-log(det(C)) -1/2* sum(diag(solve(R)%*%t(Y-Un%*%mut)%*%solve(C)%*%(Y-Un%*%mut)))
L_hat_d <- -104*log(2*pi)-104/2*log(det(R_d))-log(det(C)) -1/2* sum(diag(solve(R_d)%*%t(Y-X%*%theta)%*%solve(C)%*%(Y-X%*%theta)))
AIC[i] <- -2*L_hat + 2*6
AICd[i] <- -2*L_hat_d + log(104)*8
}
T <- matrix(diag(C))
X <- cbind(Un,T)
sim <- mvSIM(tree = tree, nsim = 1000, model = "BM1", param = list(sigma = sigma, theta = mu))
AIC <- NULL
AICd <- NULL
for(i in 1:1000){
Y <- sim[[i]]
mut <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%Y
R <- 1/103*t(Y-Un%*%mut)%*%invC%*%(Y-Un%*%mut)
theta <- solve(t(X)%*%invC%*%X)%*%t(X)%*%invC%*%Y
R_d <- 1/102*t(Y)%*%invC%*%(Y-X%*%theta)
L_hat <- -104*log(2*pi)-104/2*log(det(R))-log(det(C)) -1/2* sum(diag(solve(R)%*%t(Y-Un%*%mut)%*%solve(C)%*%(Y-Un%*%mut)))
L_hat_d <- -104*log(2*pi)-104/2*log(det(R_d))-log(det(C)) -1/2* sum(diag(solve(R_d)%*%t(Y-X%*%theta)%*%solve(C)%*%(Y-X%*%theta)))
AIC[i] <- -2*L_hat + 2*6
AICd[i] <- -2*L_hat_d + log(104)*8
}
NULL + 1
s <- 0
for(i in 1:1000){
if(AIC[i]<=AICd[i]){
s = s+1
}
}
s
AIC
AICd
simd <- mvSIM(tree = tree, nsim = 1000, model = "BM1", param = list(sigma = sigma, theta = mu, trend = c(1,2)))
AIC2 <- NULL
AIC2d <- NULL
for(i in 1:1000){
Y <- sim[[i]]
mut <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%Y
R <- 1/103*t(Y-Un%*%mut)%*%invC%*%(Y-Un%*%mut)
theta <- solve(t(X)%*%invC%*%X)%*%t(X)%*%invC%*%Y
R_d <- 1/102*t(Y)%*%invC%*%(Y-X%*%theta)
L_hat <- -104*log(2*pi)-104/2*log(det(R))-log(det(C)) -1/2* sum(diag(solve(R)%*%t(Y-Un%*%mut)%*%solve(C)%*%(Y-Un%*%mut)))
L_hat_d <- -104*log(2*pi)-104/2*log(det(R_d))-log(det(C)) -1/2* sum(diag(solve(R_d)%*%t(Y-X%*%theta)%*%solve(C)%*%(Y-X%*%theta)))
AIC2[i] <- -2*L_hat + 2*6
AIC2d[i] <- -2*L_hat_d + log(104)*8
}
s <- 0
for(i in 1:1000){
if(AIC2[i] <= AIC2d[i]){
s = s + 1
}
}
s
Y <- as.matrix(dat[,2:3])
mut <- solve(t(Un)%*%invC%*%Un)%*%t(Un)%*%invC%*%Y
R <- 1/103*t(Y-Un%*%mut)%*%invC%*%(Y-Un%*%mut)
### simuler un brownien avec les paramètres estimés
simul <- mvSIM(tree = tree, nsim = 1, model = "BM1", param = list(sigma = R, theta = mut))
simul
Y
(Y-simul)^2
(Y-simul)^2/Y
plot((Y-simul)^2/Y)
